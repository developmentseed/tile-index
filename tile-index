#!/usr/bin/env node

var geojsonStream = require('geojson-stream')
var through = require('through2')
var tileIndex = require('.')
var format = require('./format')

var argv = require('minimist')(process.argv.slice(2), {
  alias: {
    'Z': 'minimum-zoom',
    'z': 'maxiumum-zoom',
    'b': 'buffer',
    'i': 'id-property',
    'f': 'format'
  },
  default: {
    'Z': 1,
    'z': 14,
    'b': 5,
    'i': 'id',
    'f': 'indexed'
  },
  boolean: ['q', 'include-feature']
})

var nextIndex = 0
var tileToIndex = {}
function indexTile (tile) {
  var key = tile.join('/')
  if (!tileToIndex[key]) {
    var index = nextIndex++
    tileToIndex[key] = index
    result.tiles = result.tiles || {}
    result.tiles[index] = tile
  }
  return tileToIndex[key]
}

var result = {}
var features = {}

process.stdin.pipe(geojsonStream.parse())
.pipe(through.obj(function (feature, _, next) {
  var id = feature.properties[argv.i]
  var tiles = tileIndex(feature, {
    minzoom: argv.Z,
    maxzoom: argv.z,
    buffer: argv.b,
    format: 'xyz'
  })
  .map(function (t) { return t.join('/') })
  .filter(function (t) {
    return !result[id] || result[id].every(function (existing) {
      return existing !== t
    })
  })

  result[id] = (result[id] || []).concat(tiles)
  if (argv.f === 'geojson' && argv['include-feature']) {
    features[id] = (features[id] || []).concat(feature)
  }

  next()
}, function (done) {
  for (let id in result) {
    result[id] = result[id].map(function (t) { return t.split('/').map(Number) })
    if (argv.f === 'indexed') {
      result[id] = format.zxy(result[id]).map(indexTile)
    } else {
      result[id] = format[argv.f](result[id])
    }

    if (argv.f === 'geojson' && features[id]) {
      result[id].features = result[id].features.concat(features[id])
    }
  }

  console.log(JSON.stringify(result))

  done()
}))

