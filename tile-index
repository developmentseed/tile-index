#!/usr/bin/env node

var geojsonStream = require('geojson-stream')
var JSONStream = require('JSONStream')
var through = require('through2')
var tileIndex = require('.')

var argv = require('minimist')(process.argv.slice(2), {
  alias: {
    'Z': 'minimum-zoom',
    'z': 'maxiumum-zoom',
    'b': 'buffer',
    'i': 'id-property',
    'f': 'format'
  },
  default: {
    'Z': 1,
    'z': 14,
    'b': 5,
    'i': 'id',
    'f': 'indexed'
  },
  boolean: ['q', 'include-feature']
})

var format = argv.f === 'indexed' ? 'coordinates' : argv.f

var nextIndex = 0
var tileToIndex = {}
var indexToTile = {}
function indexTile (tile) {
  var key = tile.join('/')
  if (!tileToIndex[key]) {
    var index = nextIndex++
    tileToIndex[key] = index
    indexToTile[index] = tile
  }
  return tileToIndex[key]
}

process.stdin.pipe(geojsonStream.parse())
.pipe(through.obj(function (feature, _, next) {
  var id = feature.properties[argv.i]
  var tiles = tileIndex(feature, {
    minzoom: argv.Z,
    maxzoom: argv.z,
    buffer: argv.b,
    format: format
  })

  if (argv.f === 'indexed') {
    tiles = tiles.map(indexTile)
  } else if (argv.f === 'geojson' && argv['include-feature']) {
    tiles.features.push(feature)
  }

  next(null, [id, tiles])
}, function (done) {
  if (argv.f === 'indexed') {
    this.push(['tiles', indexToTile])
  }
  done()
}))
.pipe(JSONStream.stringifyObject())
.pipe(process.stdout)
